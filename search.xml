<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git基本使用</title>
      <link href="/2019/04/04/git/"/>
      <url>/2019/04/04/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone /path/to/repository</span><br></pre></td></tr></table></figure><p>如果是远端服务器上的仓库，你的命令会是这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone username@host:/path/to/repository</span><br></pre></td></tr></table></figure><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p><h2 id="添加与提交"><a href="#添加与提交" class="headerlink" title="添加与提交"></a>添加与提交</h2><p>你可以计划改动（把它们添加到缓存区），使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br></pre></td></tr></table></figure><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;代码提交信息&quot;</span><br></pre></td></tr></table></figure><p>现在，你的改动已经提交到了 <strong>HEAD</strong>，但是还没到你的远端仓库。</p><h2 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 <strong>HEAD</strong> 中了。执行如下命令以将这些改动提交到远端仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>可以把 <em>master</em> 换成你想要推送的任何分支。 </p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><p>创建一个叫做“feature_x”的分支，并切换过去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature_x</span><br></pre></td></tr></table></figure><p>切换回主分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>再把新建的分支删掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature_x</span><br></pre></td></tr></table></figure><p>除非你将分支推送到远端仓库，不然该分支就是 <em>不为他人所见的</em>：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>以在你的工作目录中 <em>获取（fetch）</em> 并 <em>合并（merge）</em> 远端的改动。</p><p>要合并其他分支到你的当前分支（例如 master），执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 <em>冲突</em></p><p><em>（conflicts）</em>。 这时候就需要你修改这些文件来人肉合并这些 <em>冲突（conflicts）</em> 了。改完之后，你需要执行如下命令以将它们标记为合并成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>在合并改动之前，也可以使用如下命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 <em>1.0.0</em> 的标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure><p><em>1b2e1d63ff</em> 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。</p><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。</p><p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><h2 id="有用的贴士"><a href="#有用的贴士" class="headerlink" title="有用的贴士"></a>有用的贴士</h2><p>内建的图形化 git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitk</span><br></pre></td></tr></table></figure><p>彩色的 git 输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config color.ui true</span><br></pre></td></tr></table></figure><p>显示历史记录时，只显示一行注释信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config format.pretty oneline</span><br></pre></td></tr></table></figure><p>交互地添加文件至缓存区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less预处理器</title>
      <link href="/2019/04/02/less/"/>
      <url>/2019/04/02/less/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="在命令行下使用"><a href="#在命令行下使用" class="headerlink" title="在命令行下使用"></a>在命令行下使用</h1><p>你可以在终端调用 LESS 解析器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lessc styles.less</span><br></pre></td></tr></table></figure><p>上面的命令会将编译后的 CSS 传递给 <code>stdout</code>, 你可以将它保存到一个文件中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lessc styles.less &gt; styles.css</span><br></pre></td></tr></table></figure><p>如何你想将编译后的 CSS 压缩掉，那么加一个 <code>-x</code> 参数就可以了。</p><h1 id="LESS-语法"><a href="#LESS-语法" class="headerlink" title="LESS 语法"></a>LESS 语法</h1><p>LESS 做为 CSS 的一种形式的扩展，它并没有阉割 CSS 的功能，而是在现有的 CSS 语法上，添加了很多额外的功能，所以学习 LESS 是一件轻而易举的事情，果断学习之！</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>很容易理解:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@nice-blue: #5B83AD;</span><br><span class="line">@light-blue: @nice-blue + #111;</span><br><span class="line"></span><br><span class="line">#header &#123; color: @light-blue; &#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#header &#123; color: #6c94be; &#125;</span><br></pre></td></tr></table></figure><p>甚至可以用变量名定义为变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@fnord: &quot;I am fnord.&quot;;</span><br><span class="line">@var: &apos;fnord&apos;;</span><br><span class="line">content: @@var;</span><br></pre></td></tr></table></figure><p>解析后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content: &quot;I am fnord.&quot;;</span><br></pre></td></tr></table></figure><p>请注意 LESS 中的变量为完全的 ‘常量’ ，所以只能定义一次.</p><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>在 LESS 中我们可以定义一些通用的属性集为一个class，然后在另一个class中去调用这些属性. 下面有这样一个class:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.bordered &#123;</span><br><span class="line">  border-top: dotted 1px black;</span><br><span class="line">  border-bottom: solid 2px black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果我们现在需要在其他class中引入那些通用的属性集，那么我们只需要在任何class中像下面这样调用就可以了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#menu a &#123;</span><br><span class="line">  color: #111;</span><br><span class="line">  .bordered;</span><br><span class="line">&#125;</span><br><span class="line">.post a &#123;</span><br><span class="line">  color: red;</span><br><span class="line">  .bordered;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.bordered</code> class里面的属性样式都会在 <code>#menu a</code> 和 <code>.post a</code>中体现出来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#menu a &#123;</span><br><span class="line">  color: #111;</span><br><span class="line">  border-top: dotted 1px black;</span><br><span class="line">  border-bottom: solid 2px black;</span><br><span class="line">&#125;</span><br><span class="line">.post a &#123;</span><br><span class="line">  color: red;</span><br><span class="line">  border-top: dotted 1px black;</span><br><span class="line">  border-bottom: solid 2px black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何 CSS <em>class</em>, <em>id</em> 或者 <em>元素</em> 属性集都可以以同样的方式引入.</p><h2 id="带参数混合"><a href="#带参数混合" class="headerlink" title="带参数混合"></a>带参数混合</h2><p>在 LESS 中，你还可以像函数一样定义一个带参数的属性集合:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.border-radius (@radius) &#123;</span><br><span class="line">  border-radius: @radius;</span><br><span class="line">  -moz-border-radius: @radius;</span><br><span class="line">  -webkit-border-radius: @radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在其他class中像这样调用它:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#header &#123;</span><br><span class="line">  .border-radius(4px);</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">  .border-radius(6px);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以像这样给参数设置默认值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.border-radius (@radius: 5px) &#123;</span><br><span class="line">  border-radius: @radius;</span><br><span class="line">  -moz-border-radius: @radius;</span><br><span class="line">  -webkit-border-radius: @radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以现在如果我们像这样调用它的话:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#header &#123;</span><br><span class="line">  .border-radius;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>radius的值就会是5px.</p><p>你也可以定义不带参数属性集合,如果你想隐藏这个属性集合，不让它暴露到CSS中去，但是你还想在其他的属性集合中引用，你会发现这个方法非常的好用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.wrap () &#123;</span><br><span class="line">  text-wrap: wrap;</span><br><span class="line">  white-space: pre-wrap;</span><br><span class="line">  white-space: -moz-pre-wrap;</span><br><span class="line">  word-wrap: break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre &#123; .wrap &#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pre &#123;</span><br><span class="line">  text-wrap: wrap;</span><br><span class="line">  white-space: pre-wrap;</span><br><span class="line">  white-space: -moz-pre-wrap;</span><br><span class="line">  word-wrap: break-word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="arguments-变量"><a href="#arguments-变量" class="headerlink" title="@arguments 变量"></a><code>@arguments</code> 变量</h3><p><code>@arguments</code>包含了所有传递进来的参数. 如果你不想单独处理每一个参数的话就可以像这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box-shadow (@x: 0, @y: 0, @blur: 1px, @color: #000) &#123;</span><br><span class="line">  box-shadow: @arguments;</span><br><span class="line">  -moz-box-shadow: @arguments;</span><br><span class="line">  -webkit-box-shadow: @arguments;</span><br><span class="line">&#125;</span><br><span class="line">.box-shadow(2px, 5px);</span><br></pre></td></tr></table></figure><p>将会输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: 2px 5px 1px #000;</span><br><span class="line">-moz-box-shadow: 2px 5px 1px #000;</span><br><span class="line">-webkit-box-shadow: 2px 5px 1px #000;</span><br></pre></td></tr></table></figure><h2 id="模式匹配和导引表达式"><a href="#模式匹配和导引表达式" class="headerlink" title="模式匹配和导引表达式"></a>模式匹配和导引表达式</h2><p>有些情况下，我们想根据传入的参数来改变混合的默认呈现，比如下面这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.mixin (@s, @color) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">.class &#123;</span><br><span class="line">  .mixin(@switch, #888);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想让<code>.mixin</code>根据不同的<code>@switch</code>值而表现各异，如下这般设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.mixin (dark, @color) &#123;</span><br><span class="line">  color: darken(@color, 10%);</span><br><span class="line">&#125;</span><br><span class="line">.mixin (light, @color) &#123;</span><br><span class="line">  color: lighten(@color, 10%);</span><br><span class="line">&#125;</span><br><span class="line">.mixin (@_, @color) &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，如果运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@switch: light;</span><br><span class="line"></span><br><span class="line">.class &#123;</span><br><span class="line">  .mixin(@switch, #888);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会得到下列CSS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line">  color: #a2a2a2;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，<code>.mixin</code>就会得到传入颜色的浅色。如果<code>@switch</code>设为dark，就会得到深色。</p><p>具体实现如下：</p><ul><li>第一个混合定义并未被匹配，因为它只接受<code>dark</code>做为首参</li><li>第二个混合定义被成功匹配，因为它只接受<code>light</code></li><li>第三个混合定义被成功匹配，因为它接受任意值</li></ul><p>只有被匹配的混合才会被使用。变量可以匹配任意的传入值，而变量以外的固定值就仅仅匹配与其相等的传入值。</p><p>我们也可以匹配多个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.mixin (@a) &#123;</span><br><span class="line">  color: @a;</span><br><span class="line">&#125;</span><br><span class="line">.mixin (@a, @b) &#123;</span><br><span class="line">  color: fade(@a, @b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now if we call <code>.mixin</code> with a single argument, we will get the output of the first definition, but if we call it with <em>two</em> arguments, we will get the second definition, namely <code>@a</code> faded to <code>@b</code>.</p><h3 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h3><p>当我们想根据表达式进行匹配，而非根据值和参数匹配时，导引就显得非常有用。如果你对函数式编程非常熟悉，那么你很可能已经使用过导引。</p><p>为了尽可能地保留CSS的可声明性，LESS通过导引混合而非if/else语句来实现条件判断，因为前者已在@media query特性中被定义。</p><p>以此例做为开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.mixin (@a) when (lightness(@a) &gt;= 50%) &#123;</span><br><span class="line">  background-color: black;</span><br><span class="line">&#125;</span><br><span class="line">.mixin (@a) when (lightness(@a) &lt; 50%) &#123;</span><br><span class="line">  background-color: white;</span><br><span class="line">&#125;</span><br><span class="line">.mixin (@a) &#123;</span><br><span class="line">  color: @a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>when关键字用以定义一个导引序列(此例只有一个导引)。接下来我们运行下列代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.class1 &#123; .mixin(#ddd) &#125;</span><br><span class="line">.class2 &#123; .mixin(#555) &#125;</span><br></pre></td></tr></table></figure><p>就会得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.class1 &#123;</span><br><span class="line">  background-color: black;</span><br><span class="line">  color: #ddd;</span><br><span class="line">&#125;</span><br><span class="line">.class2 &#123;</span><br><span class="line">  background-color: white;</span><br><span class="line">  color: #555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导引中可用的全部比较运算有： <strong>&gt; &gt;= = =&lt; &lt;</strong>。此外，关键字<code>true</code>只表示布尔真值，下面两个混合是相同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.truth (@a) when (@a) &#123; ... &#125;</span><br><span class="line">.truth (@a) when (@a = true) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>除去关键字true以外的值都被视示布尔假：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line">  .truth(40); // Will not match any of the above definitions.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导引序列使用逗号‘<code>,</code>’—分割，当且仅当所有条件都符合时，才会被视为匹配成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.mixin (@a) when (@a &gt; 10), (@a &lt; -10) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>导引可以无参数，也可以对参数进行比较运算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@media: mobile;</span><br><span class="line"></span><br><span class="line">.mixin (@a) when (@media = mobile) &#123; ... &#125;</span><br><span class="line">.mixin (@a) when (@media = desktop) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">.max (@a, @b) when (@a &gt; @b) &#123; width: @a &#125;</span><br><span class="line">.max (@a, @b) when (@a &lt; @b) &#123; width: @b &#125;</span><br></pre></td></tr></table></figure><p>最后，如果想基于值的类型进行匹配，我们就可以使用is*函式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.mixin (@a, @b: 0) when (isnumber(@b)) &#123; ... &#125;</span><br><span class="line">.mixin (@a, @b: black) when (iscolor(@b)) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>下面就是常见的检测函式：</p><ul><li><code>iscolor</code></li><li><code>isnumber</code></li><li><code>isstring</code></li><li><code>iskeyword</code></li><li><code>isurl</code></li></ul><p>如果你想判断一个值是纯数字，还是某个单位量，可以使用下列函式：</p><ul><li><code>ispixel</code></li><li><code>ispercentage</code></li><li><code>isem</code></li></ul><p>最后再补充一点，在导引序列中可以使用<strong>and</strong>关键字实现与条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.mixin (@a) when (isnumber(@a)) and (@a &gt; 0) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>使用<strong>not</strong>关键字实现或条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.mixin (@b) when not (@b &gt; 0) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h2><p>LESS 可以让我们以<em>嵌套</em>的方式编写层叠样式. 让我们先看下下面这段 CSS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#header &#123; color: black; &#125;</span><br><span class="line">#header .navigation &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">#header .logo &#123; </span><br><span class="line">  width: 300px; </span><br><span class="line">&#125;</span><br><span class="line">#header .logo:hover &#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 LESS 中, 我们就可以这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#header &#123;</span><br><span class="line">  color: black;</span><br><span class="line"></span><br><span class="line">  .navigation &#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">  &#125;</span><br><span class="line">  .logo &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    &amp;:hover &#123; text-decoration: none &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#header        &#123; color: black;</span><br><span class="line">  .navigation  &#123; font-size: 12px &#125;</span><br><span class="line">  .logo        &#123; width: 300px;</span><br><span class="line">    &amp;:hover    &#123; text-decoration: none &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码更简洁了，而且感觉跟<code>DOM</code>结构格式有点像.</p><p>注意 <code>&amp;</code> 符号的使用—如果你想写串联选择器，而不是写后代选择器，就可以用到<code>&amp;</code>了. 这点对伪类尤其有用如 <code>:hover</code> 和 <code>:focus</code>.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.bordered &#123;</span><br><span class="line">  &amp;.float &#123;</span><br><span class="line">    float: left; </span><br><span class="line">  &#125;</span><br><span class="line">  .top &#123;</span><br><span class="line">    margin: 5px; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.bordered.float &#123;</span><br><span class="line">  float: left;  </span><br><span class="line">&#125;</span><br><span class="line">.bordered .top &#123;</span><br><span class="line">  margin: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>任何数字、颜色或者变量都可以参与运算. 来看一组例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@base: 5%;</span><br><span class="line">@filler: @base * 2;</span><br><span class="line">@other: @base + @filler;</span><br><span class="line"></span><br><span class="line">color: #888 / 4;</span><br><span class="line">background-color: @base-color + #111;</span><br><span class="line">height: 100% / 2 + @filler;</span><br></pre></td></tr></table></figure><p>LESS 的运算已经超出了我们的期望，它能够分辨出颜色和单位。如果像下面这样单位运算的话:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@var: 1px + 5;</span><br></pre></td></tr></table></figure><p>LESS 会输出 <code>6px</code>.</p><p>括号也同样允许使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width: (@var + 5) * 2;</span><br></pre></td></tr></table></figure><p>并且可以在复合属性中进行运算:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border: (@width * 2) solid black;</span><br></pre></td></tr></table></figure><h2 id="Color-函数"><a href="#Color-函数" class="headerlink" title="Color 函数"></a>Color 函数</h2><p>LESS 提供了一系列的颜色运算函数. 颜色会先被转化成 <em>HSL</em> 色彩空间, 然后在通道级别操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lighten(@color, 10%);     // return a color which is 10% *lighter* than @color</span><br><span class="line">darken(@color, 10%);      // return a color which is 10% *darker* than @color</span><br><span class="line"></span><br><span class="line">saturate(@color, 10%);    // return a color 10% *more* saturated than @color</span><br><span class="line">desaturate(@color, 10%);  // return a color 10% *less* saturated than @color</span><br><span class="line"></span><br><span class="line">fadein(@color, 10%);      // return a color 10% *less* transparent than @color</span><br><span class="line">fadeout(@color, 10%);     // return a color 10% *more* transparent than @color</span><br><span class="line">fade(@color, 50%);        // return @color with 50% transparency</span><br><span class="line"></span><br><span class="line">spin(@color, 10);         // return a color with a 10 degree larger in hue than @color</span><br><span class="line">spin(@color, -10);        // return a color with a 10 degree smaller hue than @color</span><br><span class="line"></span><br><span class="line">mix(@color1, @color2);    // return a mix of @color1 and @color2</span><br></pre></td></tr></table></figure><p>使用起来相当简单:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@base: #f04615;</span><br><span class="line"></span><br><span class="line">.class &#123;</span><br><span class="line">  color: saturate(@base, 5%);</span><br><span class="line">  background-color: lighten(spin(@base, 8), 25%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你还可以提取颜色信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hue(@color);        // returns the `hue` channel of @color</span><br><span class="line">saturation(@color); // returns the `saturation` channel of @color</span><br><span class="line">lightness(@color);  // returns the &apos;lightness&apos; channel of @color</span><br></pre></td></tr></table></figure><p>如果你想在一种颜色的通道上创建另一种颜色，这些函数就显得那么的好用，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@new: hsl(hue(@old), 45%, 90%);</span><br></pre></td></tr></table></figure><p><code>@new</code> 将会保持 <code>@old</code>的 <em>色调</em>, 但是具有不同的饱和度和亮度.</p><h2 id="Math-函数"><a href="#Math-函数" class="headerlink" title="Math 函数"></a>Math 函数</h2><p>LESS提供了一组方便的数学函数，你可以使用它们处理一些数字类型的值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">round(1.67); // returns `2`</span><br><span class="line">ceil(2.4);   // returns `3`</span><br><span class="line">floor(2.6);  // returns `2`</span><br></pre></td></tr></table></figure><p>如果你想将一个值转化为百分比，你可以使用<code>percentage</code> 函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">percentage(0.5); // returns `50%`</span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>有时候，你可能为了更好组织CSS或者单纯是为了更好的封装，将一些变量或者混合模块打包起来, 你可以像下面这样在<code>#bundle</code>中定义一些属性集之后可以重复使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#bundle &#123;</span><br><span class="line">  .button () &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    background-color: grey;</span><br><span class="line">    &amp;:hover &#123; background-color: white &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .tab &#123; ... &#125;</span><br><span class="line">  .citation &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你只需要在 <code>#header a</code>中像这样引入 <code>.button</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#header a &#123;</span><br><span class="line">  color: orange;</span><br><span class="line">  #bundle &gt; .button;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>LESS 中的作用域跟其他编程语言非常类似，首先会从本地查找变量或者混合模块，如果没找到的话会去父级作用域中查找，直到找到为止.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@var: red;</span><br><span class="line"></span><br><span class="line">#page &#123;</span><br><span class="line">  @var: white;</span><br><span class="line">  #header &#123;</span><br><span class="line">    color: @var; // white</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#footer &#123;</span><br><span class="line">  color: @var; // red  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>CSS 形式的注释在 LESS 中是依然保留的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* Hello, I&apos;m a CSS-style comment */</span><br><span class="line">.class &#123; color: black &#125;</span><br></pre></td></tr></table></figure><p>LESS 同样也支持双斜线的注释, 但是编译成 CSS 的时候自动过滤掉:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Hi, I&apos;m a silent comment, I won&apos;t show up in your CSS</span><br><span class="line">.class &#123; color: white &#125;</span><br></pre></td></tr></table></figure><h2 id="Importing"><a href="#Importing" class="headerlink" title="Importing"></a>Importing</h2><p>你可以在main文件中通过下面的形势引入 <code>.less</code> 文件, <code>.less</code> 后缀可带可不带:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;lib.less&quot;;</span><br><span class="line">@import &quot;lib&quot;;</span><br></pre></td></tr></table></figure><p>如果你想导入一个CSS文件而且不想LESS对它进行处理，只需要使用<code>.css</code>后缀就可以:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;lib.css&quot;;</span><br></pre></td></tr></table></figure><p>这样LESS就会跳过它不去处理它.</p><h2 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h2><p>变量可以用类似ruby和php的方式嵌入到字符串中，像<code>@{name}</code>这样的结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@base-url: &quot;http://assets.fnord.com&quot;;</span><br><span class="line">background-image: url(&quot;@&#123;base-url&#125;/images/bg.png&quot;);</span><br></pre></td></tr></table></figure><h2 id="避免编译"><a href="#避免编译" class="headerlink" title="避免编译"></a>避免编译</h2><p>有时候我们需要输出一些不正确的CSS语法或者使用一些 LESS不认识的专有语法.</p><p>要输出这样的值我们可以在字符串前加上一个 <code>~</code>, 例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line">  filter: ~&quot;ms:alwaysHasItsOwnSyntax.For.Stuff()&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将要避免编译的值用 “”包含起来，输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line">  filter: ms:alwaysHasItsOwnSyntax.For.Stuff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h2><p>JavaScript 表达式也可以在.less 文件中使用. 可以通过反引号的方式使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@var: `&quot;hello&quot;.toUpperCase() + &apos;!&apos;`;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@var: &quot;HELLO!&quot;;</span><br></pre></td></tr></table></figure><p>注意你也可以同时使用字符串插值和避免编译:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@str: &quot;hello&quot;;</span><br><span class="line">@var: ~`&quot;@&#123;str&#125;&quot;.toUpperCase() + &apos;!&apos;`;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@var: HELLO!;</span><br></pre></td></tr></table></figure><p>它也可以访问JavaScript环境:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@height: `document.body.clientHeight`;</span><br></pre></td></tr></table></figure><p>如果你想将一个JavaScript字符串解析成16进制的颜色值, 你可以使用 <code>color</code> 函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@color: color(`window.colors.baseColor`);</span><br><span class="line">@darkcolor: darken(@color, 10%);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js使用Ajax</title>
      <link href="/2019/03/30/vue-axios/"/>
      <url>/2019/03/30/vue-axios/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在原生的Vue.js中，默认是不支持的Ajax的。但是，在某些情况下又不得不用。为了让Vue能够支持异步请求API，可以使用axios库来实现。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>切换到Vue项目目录下，使用npm来安装插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save axios vue-axios</span><br></pre></td></tr></table></figure><p>打开main.js，注册组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import VueAxios from &apos;vue-axios&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.axios.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">this.axios.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">this.$http.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>通过使用GitHub的API接口，来实现一个简单的用户搜索功能。当用户输入用户名后进行提交，在页面不刷新的前提下，异步请求API更新页面内容。</p><blockquote><p>推荐使用vscode来开发，安装<strong>Veutr</strong>插件，提高开发效率。</p></blockquote><p>新建一个component</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;github&quot;&gt;</span><br><span class="line">    &lt;form @submit.prevent=&quot;find()&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class="line">      &lt;button type=&quot;submit&quot;&gt;搜索&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;div class=&quot;user-info&quot; v-if=&quot;content&quot;&gt;</span><br><span class="line">      &lt;img :src=&quot;content.avatar_url&quot; alt=&quot;avatar&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; content.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; content.location &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; content.bio &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;github&quot;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username: &quot;&quot;,</span><br><span class="line">      content: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    find: function() &#123;</span><br><span class="line">      if (this.username != &quot;&quot;) &#123;</span><br><span class="line">        this.axios</span><br><span class="line">          .get(&quot;https://api.github.com/users/&quot; + this.username)</span><br><span class="line">          .then(response =&gt; &#123;</span><br><span class="line">            this.content = response.data;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">img.avatar &#123;</span><br><span class="line">  width: 5em;</span><br><span class="line">  height: 5em;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> vue.js </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI部署</title>
      <link href="/2019/03/30/vue-cli/"/>
      <url>/2019/03/30/vue-cli/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前学习Vue.js的时候，一直都是直接在HTML里引入script。在正儿八经的项目开发中，就需要用Vue CLI来生成环境。Vue CLI就像一个脚手架，生成好一个环境，最后通过webpack把你写的template进行封装打包。</p><p>Web开发经历了20多年的发展，不再是写写HTML，CSS，或者切切图的事。组件化开发成为了现在的主流，便于前端工程师们后期进行修改和维护。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要先安装好Node.js环境，此处省略。</p><p>切换到项目目录，全局安装Vue CLI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure><p>创建应用。不需要对Webpack有太多的了解，这一切Vue CLI都会帮我们完成。<strong>app</strong>是自定义的项目名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack app</span><br></pre></td></tr></table></figure><ul><li>首先会询问项目名，描述，作者三项，直接回车即可</li><li>接着有一个 vue build 选项，直接回车即可</li><li>然后会问要不要安装 vue-router，开发单页应用基本离不开路由，推荐选择安装</li><li>最后是语法检查，单元测试，项目测试三项直接输入 n </li></ul><p>部署完成后，根据提示把命令敲一遍，然后即可通过localhost:8080访问你的应用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd app</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CentOS 7上添加Swap交换空间</title>
      <link href="/2018/10/27/centos-swap/"/>
      <url>/2018/10/27/centos-swap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>原文出处：<a href="https://blog.csdn.net/zstack_org/article/details/53258588" target="_blank" rel="noopener">https://blog.csdn.net/zstack_org/article/details/53258588</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如何让服务器响应更快？如何避免应用出现内存不足的错误？最简单的方法就是增加交换空间。Swap是存储盘上的一块自留地，操作系统可以在这里暂存一些内存里放不下的东西。</p><p>这从某种程度上相当于增加了服务器的可用内存。虽然从swap读写比内存慢，但总比没有好，算是内存不够时的安全网。</p><p>如果没有swap，则服务器一旦内存不足，就会开始终止应用以释放内存，甚至会崩溃，这会让你丢失一些还没来得及保存的数据，或者造成当机。有些应用明确要求系统配置swap以确保数据访问的可靠性。</p><p>本文介绍如何在CentOS 7服务器上创建并启用swap文件。</p><p>注：swap通常在传统机械硬盘上表现更好，在SSD上使用swap可能会造成问题，尤其是硬件老化之后。所以，对于DigitalOcean以及其他使用基于SSD的云主机服务的用户，我们不推荐启用swap。这甚至会影响到跟你的虚拟机共用宿主机的其他用户。</p><p>对于DigitalOcean用户，提升性能的最佳方法就是更新Droplet。通常来说，升级后的主机表现都会有所提升，并且更不容易受到硬件问题的影响。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，你需要一台CentOS 7服务器，配置过具备<code>sudo</code>权限的非root用户（配置过程可参考<a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-centos-7" target="_blank" rel="noopener">这个教程</a>的第一到第四步骤）。</p><p>准备就绪后，以该用户名SSH到你的CentOS服务器上，准备安装swap文件。</p><h2 id="检查系统的Swap信息"><a href="#检查系统的Swap信息" class="headerlink" title="检查系统的Swap信息"></a>检查系统的Swap信息</h2><p>首先我们需要检查系统的存储，看看是否已经配置过swap。一个系统可以设置多个swap文件或分区，不过一般来说一个就够了。</p><p>使用<code>swapon</code>命令可以检查系统是否已经配置过swap，这是一个通用的swap工具。使用<code>-s</code>标签可列出当前存储设备上的swap使用情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon -s</span><br></pre></td></tr></table></figure><p>如果该命令没有返回出结果，则代表该系统尚未配置过swap。</p><p>或者，我们也可以使用<code>free</code>工具来查看系统的整体内存使用情况，这里可以看到内存和swap的使用状态（显示单位为MB）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          3953        315       3637          8         11        107</span><br><span class="line">-/+ buffers/cache:        196       3756</span><br><span class="line">Swap:            0          0       4095</span><br></pre></td></tr></table></figure><p>这里可以看到我们这个系统的total swap空间为0，即没有配置过swap。这与我们在<code>swapon</code>里看到的结果相符合。 </p><h2 id="检查可用的存储空间"><a href="#检查可用的存储空间" class="headerlink" title="检查可用的存储空间"></a>检查可用的存储空间</h2><p>通常，我们建立一个单独的分区作为swap。然而有时候由于硬件或软件的限制，新建分区的方式无法实现，这种情况下就可以建立一个swap文件来实现同样的功能。</p><p>开始之前，先检查一下磁盘的可用空间。输入如下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        59G  1.5G   55G   3% /</span><br><span class="line">devtmpfs        2.0G     0  2.0G   0% /dev</span><br><span class="line">tmpfs           2.0G     0  2.0G   0% /dev/shm</span><br><span class="line">tmpfs           2.0G  8.3M  2.0G   1% /run</span><br><span class="line">tmpfs           2.0G     0  2.0G   0% /sys/fs/cgroup</span><br></pre></td></tr></table></figure><p>这里的<code>-h</code>标记是为了告诉<code>dh</code>将信息输出为对人类友好的格式，比如以MB或GB为单位输出空间使用和空余情况，而不是直接输出内存块的个数。</p><p>从第一行可以看到我们的存储分区上还有59GB的空间剩余，这足够我们操作了。（我这是一台中等规模的新建云主机，每个人的情况可能有很大不同。）</p><p>合适的swap空间是多大？关于这个问题有很多种选择，这取决于你的应用需求和你个人的偏好。一般来说，内存容量的两倍就是个不错的起点。</p><p>我的系统内存有4GB，如果设置8GB的swap会占据太多空间，所以我决定只设置4GB就好。</p><h2 id="创建Swap文件"><a href="#创建Swap文件" class="headerlink" title="创建Swap文件"></a>创建Swap文件</h2><p>接下来我们将在文件系统上创建swap文件。我们要在根目录（<code>/</code>）下创建一个名叫<code>swapfile</code>的文件，当然你也可以选择你喜欢的文件名。该文件分配的空间将等于我们需要的swap空间。</p><p>最快捷的创建方式是<code>fallocate</code>命令，该命令能够创建一个预分配指定大小空间的文件。输入如下指令创建一个4GB的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fallocate -l 4G /swapfile</span><br></pre></td></tr></table></figure><p>输入密码后，该swap文件将立即创建完毕。我们可以用<code>ls</code>命令检查文件大小： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -lh /swapfile</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root 4.0G Oct 30 11:00 /swapfile</span><br></pre></td></tr></table></figure><p>至此，我们的swap文件就创建完毕了。 </p><h2 id="启用Swap文件"><a href="#启用Swap文件" class="headerlink" title="启用Swap文件"></a>启用Swap文件</h2><p>现在我们已经有了swap文件，但系统还不知道应该使用该文件作为swap，这就需要我们告知系统将该文件格式化为swap并启用起来。</p><p>首先我们需要更改swap文件的权限，确保只有root才可读，否则会有很大的安全隐患。使用<code>chmod</code>命令进行权限操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure><p>如此，该文件的读写都只有root才能操作。使用<code>ls -lh</code>命令检查一下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -lh /swapfile</span><br><span class="line"></span><br><span class="line">-rw------- 1 root root 4.0G Oct 30 11:00 /swapfile</span><br></pre></td></tr></table></figure><p>然后，使用如下命令告知系统将该文件用于swap： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br><span class="line"></span><br><span class="line">Setting up swapspace version 1, size = 4194300 KiB</span><br><span class="line">no label, UUID=b99230bb-21af-47bc-8c37-de41129c39bf</span><br></pre></td></tr></table></figure><p>现在，这个swap文件就可以作为swap空间使用了。输入如下命令开始使用该swap： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure><p>我们可以输入如下命令来确认一下设置是否已经生效： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swapon -s</span><br><span class="line"></span><br><span class="line">Filename                Type        Size    Used    Priority</span><br><span class="line">/swapfile               file        4194300 0     -1</span><br></pre></td></tr></table></figure><p>可以看到返回的结果中已经有我们刚才设置的swap。再使用<code>free</code>工具确认一下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br><span class="line"></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          3953        315       3637          8         11        107</span><br><span class="line">-/+ buffers/cache:        196       3756</span><br><span class="line">Swap:         4095          0       4095</span><br></pre></td></tr></table></figure><p>至此，我们的swap已经设置完毕，操作系统会在需要的时候使用它。</p><h2 id="使Swap文件永久生效"><a href="#使Swap文件永久生效" class="headerlink" title="使Swap文件永久生效"></a>使Swap文件永久生效</h2><p>至此我们已经在系统中启用了swap文件，然而一旦系统重启后，服务器还不能自动启用该文件。要让系统在重启后自动生效swap，我们可以通过修改<code>fstab</code>文件来实现（这是一个管理文件系统和分区的表）。</p><p>用<code>sudo</code>权限打开该文件编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure><p>在文件末尾加入下面这行内容，告诉操作系统自动使用刚才创建的swap文件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swapfile   swap    swap    sw  0   0</span><br></pre></td></tr></table></figure><p>添加完毕后，保存退出。以后服务器每次重启都会检查该文件并自动启用swap。 </p><h2 id="更改Swap配置（可选）"><a href="#更改Swap配置（可选）" class="headerlink" title="更改Swap配置（可选）"></a>更改Swap配置（可选）</h2><p>有几个涉及swap的选项可能会影响到系统的性能表现。大部分情况下这些选项是可选的，具体要修改成什么样则取决于你的应用需求以及个人偏好。</p><h3 id="Swappiness"><a href="#Swappiness" class="headerlink" title="Swappiness"></a>Swappiness</h3><p><code>swappiness</code>参数决定了系统将数据从内存交换到swap空间的频率，数值设置在0到100之间，代表系统将数据从内存交换到swap空间的力度。</p><p>该数值越接近于0，系统越倾向于不进行swap，仅在必要的时候进行swap操作。由于swap要比内存慢很多，因此减少对swap的依赖意味着更高的系统性能。</p><p>该数值越接近于100，系统越倾向于多进行swap。有些应用的内存使用习惯更适合于这种情况，这也于服务器的用途有关。</p><p>输入如下命令查看当前的swappiness数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br><span class="line"></span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>CentOS 7默认设置了30的swappiness，这对于大部分桌面系统和本地服务器是比较中庸的数值。对于VPS系统而言，可能接近于0的值是更加合适的。</p><p>使用<code>sysctl</code>命令可以修改swappiness。比如将swappiness设为10：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=10</span><br><span class="line"></span><br><span class="line">vm.swappiness = 10</span><br></pre></td></tr></table></figure><p>本次修改将一直生效到下次重启前。如果希望永久修改该数值，则需要编辑<code>sysctl</code>配置文件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>将以下内容粘贴到文件末尾： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness = 10</span><br></pre></td></tr></table></figure><p>编辑完成后，保存退出，之后服务器每次重启的时候会将swappiness设置为该值。 </p><h3 id="缓存压力（Cache-Pressure-）"><a href="#缓存压力（Cache-Pressure-）" class="headerlink" title="缓存压力（Cache Pressure ）"></a>缓存压力（Cache Pressure ）</h3><p>另一个可以考虑更改的配置项是<code>vfs_cache_pressure</code>，该配置项涉及特殊文件系统元文件条目的存储。对此类信息的频繁读取是非常消耗性能的，所以延长其在缓存的保存时间可以提升系统的性能。</p><p>通过<code>proc</code>文件系统查看缓存压力的当前设定值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/vfs_cache_pressure</span><br><span class="line"></span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>这个数值是比较高的，意味着系统从缓存中移除inode信息的速度比较快。一个保守一些的数值是50，使用<code>sysctl</code>命令进行设置： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl vm.vfs_cache_pressure=50</span><br><span class="line"></span><br><span class="line">vm.vfs_cache_pressure = 50</span><br></pre></td></tr></table></figure><p>这条命令仅在重启前有效。要让该设置永久有效，需要编辑<code>sysctl</code>配置文件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在文件末尾添加如下内容： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.vfs_cache_pressure = 50</span><br></pre></td></tr></table></figure><p>保存退出，服务器就会在每次重启后都自动将缓存压力设置为50了。 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们的系统内存就获得了一些喘气的空间。有了swap空间可以有效避免一些常见的问题。</p><p>如果你仍然会遇到内存不足（OOM，out of memory）的错误信息，或者你的系统不能运行你需要的应用，那么最好的方法是优化你的应用配置或者升级你的服务器，不过配置swap空间也不失为一个灵活的节省方案。</p><p>本文来源自<a href="https://www.digitalocean.com/community" target="_blank" rel="noopener">DigitalOcean Community</a>。英文原文：<a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-centos-7" target="_blank" rel="noopener">How To Add Swap on CentOS 7</a> by <a href="https://www.digitalocean.com/community/users/jbarnett" target="_blank" rel="noopener">Josh Barnett</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> swap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeBB数据库备份与恢复</title>
      <link href="/2018/10/14/nodebb-database-backup-restore/"/>
      <url>/2018/10/14/nodebb-database-backup-restore/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>NodeBB在MongoDB下的备份和恢复操作。</p><h3 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongodump -u nodebb -p yourpassword --authenticationDatabase=nodebb -d nodebb</span><br></pre></td></tr></table></figure><p><strong>命令解释：</strong></p><ul><li>-u：用户名，如果按照官方教程来做，则用户名为<code>nodebb</code></li><li>-p：密码</li><li>–authenticationDatabase：等待进行验证的数据库，一般写你的数据库名</li><li>-d：你的数据库名，如果按照官方教程来做，则数据库名为<code>nodebb</code></li></ul><p>以上命令会在当前目录下生成<code>dump</code>目录，在里面有一个叫<code>nodebb</code>的目录，其内即为数据文件。</p><h3 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongorestore -u nodebb -p yourpassword --authenticationDatabase=nodebb -d nodebb --drop dump/nodebb</span><br></pre></td></tr></table></figure><p><strong>命令解释：</strong></p><ul><li>-u：用户名，如果按照官方教程来做，则用户名为<code>nodebb</code></li><li>-p：密码</li><li>–authenticationDatabase：等待进行验证的数据库，一般写你的数据库名</li><li>-d：你的数据库名，如果按照官方教程来做，则数据库名为<code>nodebb</code></li><li>–drop dump/nodebb：如果不加<code>--drop</code>这个参数，那么数据库内原有的数据不会被清除，导入时会遇到<strong>数据重复！</strong>会出现大量警告提示。加了这个参数就是先清掉数据库原有的内容，再将备份导入。后面的<code>dump/nodebb</code>是你当时导出数据的目录，这里用的相对路径</li></ul><h3 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h3><p>手动备份很麻烦，很不智能，还容易出错，作为一个Geek是不允许这种事情发生的。于是有了下面的自动备份脚本，该脚本将在每天凌晨3点30分自动对数据库进行备份，然后对备份后的数据文件进行压缩打包，之后删除三天前的历史备份档案，只保留最近三天的备份。你最终看到的就是备份目录内只有最近三天的备份文件压缩包。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">backup_date=$(date +"%F")#获取日期</span><br><span class="line">cd /root/#切换到当前用户家目录，你可以换成你的用户目录</span><br><span class="line">/usr/bin/mongodump -u nodebb -p yourpassword --authenticationDatabase=nodebb -d nodebb#导出数据库备份</span><br><span class="line">tar -zcvf dump/$&#123;backup_date&#125;.tar.gz dump/nodebb --remove-files#将导出的备份压缩打包，并以日期命名压缩包</span><br><span class="line">find dump/ -mtime +3 | xargs rm -f#检索三天前的备份压缩包，将之删除</span><br><span class="line">echo $(date +"%F %H:%M:%S") Backup successfully ! &gt;&gt; log.backup#写入日志</span><br></pre></td></tr></table></figure><ul><li>将上述脚本保存到<code>/root/script/</code>目录下，并命名为<code>backup.sh</code></li><li>使用命令<code>chmod u+x /root/script/backup.sh</code>为脚本添加可执行权限</li><li>运行命令<code>crontab -e</code>打开<code>crontab</code>的任务添加界面，加入下面这一行：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 3 * * * /root/script/backup.sh</span><br></pre></td></tr></table></figure><p>使用<code>crontab -l</code>就可以看到刚才添加的定时任务了。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> nodebb </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/15/hello-world/"/>
      <url>/2018/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
